# -*- coding: utf-8 -*-
import telebot
from telebot import types, logger
from telebot.types import  InputMediaPhoto, InputMediaVideo, InputMediaDocument
import pandas as pd
# 04_01_2025
import sys
import logging
import msg
import os
import keybords
import time
import utils
from sqliteormmagic import SQLiteDB
import sqliteormmagic as som


from config import TOKEN, ADMIN_LIST

bot = telebot.TeleBot(token=TOKEN, parse_mode='HTML', skip_pending=True)    
bot.set_my_commands(
    commands=[
        telebot.types.BotCommand("start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        telebot.types.BotCommand("luck", "–ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É"),       
        telebot.types.BotCommand("balance", "–ú–æ–π –±–∞–ª–∞–Ω—Å"),   
        telebot.types.BotCommand("help", "–ü—Ä–∞–≤–∏–ª–∞"),                     
    ],)

db_users = SQLiteDB('users.db')


def main():
    @bot.message_handler(commands=['start'])
    def start_fnc(message):
        utils.cr_table_users(message)
        db_users.create_table('reklama', [
        ("from_user_id", 'INTEGER'), 
        ("from_user_username", 'TEXT'), 
        ("reg_time", 'TEXT'),       
        ("utm_code", 'TEXT'),                         
        ])
        unique_code = utils.extract_unique_code(message.text)
        print(unique_code)

        if unique_code:  # if the '/start' command contains a unique_code
            db_users.ins_unique_row('reklama', [
            ("from_user_id", message.from_user.id), 
            ("from_user_username", message.from_user.username), 
            ("reg_time", utils.get_msk_time()),         
            ("utm_code", unique_code),    
            ])  
    
        bot.send_message(chat_id=message.from_user.id, text=msg.start_msg_user,reply_markup=keybords.user_menu_main())
    
    @bot.message_handler(commands=['balance'])
    def balance_fnc(message):          
        balance = utils.db_users.find_one_value_from_row(value='balance', table_name='balance', column_name='from_user_id', key_name=message.from_user.id)
        text = f"""
–ú–æ–π –±–∞–ª–∞–Ω—Å: {balance} –±–∞–ª.

–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –æ–±–º–µ–Ω–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –Ω–∞–∂–º–∏—Ç–µ /help
"""
        bot.send_message(chat_id=message.from_user.id, text=text, reply_markup=keybords.change_board())

    @bot.message_handler(commands=['luck'])
    def dice_fnc(message):            

        m = bot.send_dice(chat_id=message.from_user.id, emoji="‚öΩ")
        dice_result = m.dice.value
        time.sleep(4)
        utils.cr_table_balance(message=message)
        balance = utils.db_users.find_one_value_from_row(value='balance', table_name='balance', column_name='from_user_id', key_name=message.from_user.id)
        
        if dice_result in [4]:
            bot.send_message(chat_id=message.from_user.id, text="üî• –ö—Ä–∞—Å–∏–≤—ã–π –≥–æ–ª +2 –±–∞–ª–ª–∞! üî•")
            balance += 2

        elif dice_result in [3]:
            bot.send_message(chat_id=message.from_user.id, text="üî• –í—ã –º–æ–∂–µ—Ç–µ –ª—É—á—à–µ +1 –±–∞–ª–ª! üî•")           
            balance += 1

        elif dice_result in [2]:
            bot.send_message(chat_id=message.from_user.id, text="üî• –¢–∞–∫ —Å–µ–±–µ —É–¥–∞—Ä -1 –±–∞–ª–ª! üî•")           
            balance -= 1            
    
        elif dice_result in [1]:
            bot.send_message(chat_id=message.from_user.id, text="üî• –í—ã —Å–µ—Ä—å–µ–∑–Ω–æ? -1 –±–∞–ª–ª! üî•")           
            balance -= 1

        elif dice_result in [5]:
            bot.send_message(chat_id=message.from_user.id, text="üî• –í–ø–æ–ª–Ω–µ –Ω–µ–ø–ª–æ—Ö–æ! +1 –±–∞–ª–ª! üî•")           
            balance += 1

        if balance < 0:
            balance = 0

        bot.send_message(chat_id=message.from_user.id, text=f"–í–∞—à –±–∞–ª–∞–Ω—Å üëâ {balance}\n–ß—Ç–æ–±—ã –æ–∑–Ω–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –Ω–∞–∂–º–∏—Ç–µ /help")           
        db_users.upd_element_in_column(table_name='balance', set_upd_par_name='balance', set_key_par_name=balance, upd_column_name='from_user_id', key_column_name=message.from_user.id)
    
    
    @bot.message_handler(commands=['help'])
    def help_fnc(message):
        bot.send_message(chat_id=message.from_user.id, text=msg.msg_dice_start)       

    @bot.message_handler(commands=['admin'])
    def start_fnc(message):
        if message.from_user.id in ADMIN_LIST:
            bot.send_message(chat_id=message.from_user.id, text=msg.start_msg_admin, reply_markup=keybords.admin_menu_main())


    @bot.callback_query_handler(func=lambda call: True)
    def callback_query(call):
        # –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è —á–∞—Å—Ç—å
        if call.data == 'about':
            db_users.upd_element_in_column(table_name='users', set_upd_par_name='about_time', set_key_par_name=utils.get_msk_time(), upd_column_name='from_user_id', key_column_name=call.from_user.id)
            bot.send_message(chat_id=call.from_user.id, text=msg.about_msg, reply_markup=keybords.back())

        elif call.data == 'change':
            pass







































































































































































































































































































































































































































































































































































































































        

        elif call.data == 'faq':
            db_users.upd_element_in_column(table_name='users', set_upd_par_name='faq_time', set_key_par_name=utils.get_msk_time(), upd_column_name='from_user_id', key_column_name=call.from_user.id)
            bot.send_message(chat_id=call.from_user.id, text=msg.faq_msg, reply_markup=keybords.back())
                              

        elif call.data == 'contacts':
            db_users.upd_element_in_column(table_name='users', set_upd_par_name='contacts_time', set_key_par_name=utils.get_msk_time(), upd_column_name='from_user_id', key_column_name=call.from_user.id)
            bot.send_message(chat_id=call.from_user.id, text=msg.contacts_msg, reply_markup=keybords.back())  

        elif call.data == 'back':
            bot.send_message(chat_id=call.from_user.id, text=msg.start_msg_user,reply_markup=keybords.user_menu_main())

        # –∞–¥–º–∏–Ω—Å–∫–∞—è —á–∞—Å—Ç—å
        elif call.data == 'report_utm':
            if call.from_user.id in ADMIN_LIST:
                connection = som.create_connection('users.db')
                query = f"""
                SELECT * FROM reklama 
                """
                all_records = pd.read_sql_query(query, connection)
                len_of_records = len(all_records['from_user_id'])
                all_records.to_excel('report.xlsx', index=False)
                connection.close()
                with open('report.xlsx', mode='rb') as filename:
                    bot.send_document(call.from_user.id, document=filename, caption=f'–í—Å–µ–≥–æ {len_of_records} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤. –û—Ç—á–µ—Ç –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ')
        
        elif call.data == 'report_users':
            if call.from_user.id in ADMIN_LIST:
                connection = som.create_connection('users.db')
                query = f"""
                SELECT * FROM users 
                """
                all_records = pd.read_sql_query(query, connection)
                len_of_records = len(all_records['from_user_id'])
                all_records.to_excel('report.xlsx', index=False)
                connection.close()
                with open('report.xlsx', mode='rb') as filename:
                    bot.send_document(call.from_user.id, document=filename, caption=f'–í—Å–µ–≥–æ {len_of_records} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤. –û—Ç—á–µ—Ç –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ')

    
    bot.infinity_polling()

if __name__ == "__main__":
    main()

    